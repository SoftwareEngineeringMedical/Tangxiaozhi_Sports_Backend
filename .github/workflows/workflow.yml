name: Glycemia SE Huangjie
on:
  schedule:
    - cron: '0 0 */3 * *'
  push:
    branches: [ "main" ]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: ðŸ—‘ Delete deployment
        uses: strumwolf/delete-deployment-environment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: SERVER_WITH_PUBLIC_IP
          onlyRemoveDeployments: true
  project-build:
    runs-on: ubuntu-latest
    environment: SERVER_WITH_PUBLIC_IP
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'

      - name: Set up the Maven dependencies caching
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Maven dependencies
        run: mvn install -DskipTests
        env:
          NACOS_ADDR: ${{ secrets.NACOS_ADDR }}
          NACOS_NAMESPACE: ${{ secrets.NACOS_NAMESPACE }}
      - name: copy file via ssh password
        if: ${{ github.ref == 'refs/heads/main2' }}
        uses: appleboy/scp-action@v0.1.7
        env:
          NACOS_ADDR: ${{ secrets.NACOS_ADDR }}
          NACOS_NAMESPACE: ${{ secrets.NACOS_NAMESPACE }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          source: .
          target: $JAR_HOME
      - name: Deploy the application
        if: ${{ github.ref == 'refs/heads/main2' }}
        uses: appleboy/ssh-action@v1.0.3
        env:
          NACOS_ADDR: ${{ secrets.NACOS_ADDR }}
          NACOS_NAMESPACE: ${{ secrets.NACOS_NAMESPACE }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            docker compose stop
      - name: Upload JARs as Artifact
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/upload-artifact@v4
        with:
          name: Maven Jar File
          path: |
            user-service/target/${{ env.JAR_NAME }}
            glycemia-service/target/${{ env.JAR_NAME }}
            exercise-service/target/${{ env.JAR_NAME }}
            gateway/target/${{ env.JAR_NAME }}
            oa-service/target/${{ env.JAR_NAME }}
      - name: Run User&Exercise Service
        run: |
          echo "Starting task in foreground for 60 seconds..."
          java -jar user-service/target/app.jar -Dserver.port=10081 &
          java -jar exercise-service/target/app.jar -Dserver.port=10083 &
          FG_PID=$!
          sleep 60
          echo "Moving task to background..."
          disown $FG_PID
          echo "Continuing task in background for up to 20 minutes..."
          timeout 15m wait $FG_PID || echo "Background task completed or timed out."
        env:
          NACOS_ADDR: ${{ secrets.NACOS_ADDR }}
          NACOS_NAMESPACE: ${{ secrets.NACOS_NAMESPACE }}
      - name: Run tests
        run: mvn -B test jacoco:report
        env:
          NACOS_ADDR: ${{ secrets.NACOS_ADDR }}
          NACOS_NAMESPACE: ${{ secrets.NACOS_NAMESPACE }}
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
      - name: docker build
        run: docker compose up -d user-service glycemia-service gateway interact-service oa-service exercise-service
      - name: docker run All Applications
        env:
          NACOS_ADDR: ${{ secrets.NACOS_ADDR }}
          NACOS_NAMESPACE: ${{ secrets.NACOS_NAMESPACE }}
        run: |
          docker run -d backend-oa-service --env-file=web-variables.env
          docker run -d backend-glycemia-service --env-file=web-variables.env
          docker run -d backend-user-service --env-file=web-variables.env
          docker run -d backend-exercise-service --env-file=web-variables.env
          docker run -d backend-gateway --env-file=web-variables.env